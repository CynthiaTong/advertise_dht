ed = dy_import_module("ed25519.r2py")
sha = dy_import_module("sha.r2py")

PRIVATE_KEY_SIZE = 64
PUBLIC_KEY_SIZE = 32
ID_KEY_SIZE = 20

class NonexistingKeypairFileError(Exception):
  """ Error when keypair file does not exist """
class GeneralKeypairFileError(Exception):
  """ Other general error when reading from keypair file """


class Keypair:
  def __init__(self, private_key=None, public_key=None, id_key=None, seq=0, cas=-1, salt=None):
    self.privatekey, self.publickey = ed.create_keypair(private_key, public_key)
    self.seq = seq 
    self.cas = cas 
    self.salt = salt
    self.create_key(id_key)

  # key(id) is the sha-1 hash of publickey (plus salt if it is present)
  def create_key(self, id_key):
    if id_key is None:
      if self.salt:
        self.key = sha.sha_hash(self.publickey.vk_s + self.salt)
      else:
        self.key = sha.sha_hash(self.publickey.vk_s)
    else:
      self.key = id_key 

  def sign(self, value):
    return self.privatekey.sign(value)

  def verify(self, sig, value):
    return self.publickey.verify(sig, value)

  def opts(self, value):
    value = str(value)
    self.seq += 1  # increment seq for new put query 

    opts = {
      "k": self.publickey.vk_s,
      "seq": self.seq,
      "sig": self.sign(value)
    }

    if self.cas > -1:
      opts["cas"] = self.cas 
    if self.salt is not None and isinstance(self.salt, str):
      opts["salt"] = self.salt 

    return opts 

  def __str__(self):
    output = "privatekey: %s\npublickey: %s\nkey(id) %s\n" %(self.privatekey.sk_s, self.publickey.vk_s, self.key)
    output += "seq: %d \n" %(self.seq)
    if self.cas > -1:
      output += "cas: %d \n" %(self.cas)
    if self.salt is not None and isinstance(self.salt, str):
      output += "salt: %s\n" %(self.salt)

    return output 

  # keypair file io 
  def export_keypair(self, filename):
    file = openfile(filename, True)

    file.writeat(self.privatekey.sk_s, 0)
    file.writeat(self.publickey.vk_s, PRIVATE_KEY_SIZE)
    file.writeat(self.key, PRIVATE_KEY_SIZE + PUBLIC_KEY_SIZE)

    file.close()


def import_keypair(filename, seq=0, cas=-1, salt=None):
  try:
    file = openfile(filename, False)

    content = file.readat(PRIVATE_KEY_SIZE + PUBLIC_KEY_SIZE + ID_KEY_SIZE, 0)

    sk = content[:PRIVATE_KEY_SIZE]
    vk = content[PRIVATE_KEY_SIZE: PRIVATE_KEY_SIZE + PUBLIC_KEY_SIZE]
    id = content[PRIVATE_KEY_SIZE + PUBLIC_KEY_SIZE:]

    file.close()
    return Keypair(sk, vk, id, seq, cas, salt)

  except FileNotFoundError:
    raise NonexistingKeypairFileError("Keypair file %s does not exist." % filename)
  except Exception, e:
    raise GeneralKeypairFileError("Error importing from keypair file %s, %s" % (filename, repr(e)))
