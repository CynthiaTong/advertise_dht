dy_import_module_symbols("dht.r2py")

peers = [("bttracker.debian.org", 6881), ("router.bittorrent.com", 6881), ("router.utorrent.com", 6881)]
ip = getmyip()
port = 63101
timeout = 1000  # for testing, set it to be a large number 
dht = None 

class DHTNoResponseError(Exception):
  """ Error starting up the DHT """


def setup(my_id):
  try: 
    dht = DHT(my_id)
    listen = setup_listen(dht)
    createthread(listen)

    for p in peers:
      ip = gethostbyname(p[0])
      port = p[1]
      # ping_node is the "hard" way to bootstrap - it actually sends messages to the pinged node 
      # if we don't have anything in the peersfile yet, use this  
      dht.ping_node(ip, port)

      sleep(0.05)
      # break     ### to be removed 

    # dht.ping_node("172.16.46.87", port)

  except Exception, e:
    log ("Failed to initialize DHT. " + str(e) + "\n")

  sleep(2)

  # nodes = dht.router.get_all_nodes()
  # log (nodes, "\n")
  dht.lookups.dht_lookup(my_id, 0, callback)    # lookup my_id 
  # refresh buckets 
  dht.router.refresh_buckets()


def setup_listen(dht):
  def listen():
    starttime = getruntime()

    ip = getmyip()
    port = 63101   # range: 63100, 63201

    udpresponsesocket = listenformessage(ip, port)

    while getruntime() < starttime + timeout:
      try:  
        remoteip, remoteport, message = udpresponsesocket.getmessage()
        log ("=========================\nGot message! \n", 
              remoteip, ": ", remoteport, "\n", message, 
              "\n-------------------------\n")

        dht.new_message(message, remoteip, remoteport, 1)

      except SocketWouldBlockError:
        sleep(0.1)
      except SocketClosedLocal:
        break

    udpresponsesocket.close()
    raise DHTNoResponseError("DHT Timeout: Did not receive enough replies for Node Lookup.")
  return listen 


def callback(EVENT, id, data=None, data_len=0):
  log (EVENT, "\t", id, "\n")
