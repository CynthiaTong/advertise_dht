"""
<Program Name>
  dht_advertise.r2py

<Author>
  Cynthia Xin Tong

<Purpose>
  The DHT advertise module.
"""

# log (getruntime(), "\n")
dht_module = dy_import_module("dht.r2py")
util = dy_import_module("util.r2py")
sha = dy_import_module("sha.r2py")
peerfile = dy_import_module("peerfile.r2py")
dy_import_module_symbols("constants.py")
log (getruntime(), "\n")


# my_peers = [("router.utorrent.com", 6881, "a"), ("bttracker.debian.org", 6881, "b"), ("router.bittorrent.com", 6881, "c")]
my_peers = peerfile.import_peers("peers.txt")

my_ip = getmyip()
MY_PORT = 63101
SETUP_PORT = 63102
timeout = 600   # set timeout to be 10 min for now
# context variables
mycontext["setup"] = False
mycontext["announce"] = False
mycontext["lookup"] = False
mycontext["put"] = False
mycontext["get"] = False

mycontext["lock"] = createlock()
mycontext["cb"] = None

class DHTSetupError(Exception):
  """ Error setting up the DHT """
class DHTNoResponseError(Exception):
  """ Not enough responses to complete the DHT setup"""
class DHTAdvertiseError(Exception):
  """ Error announcing to the DHT """
class DHTPutValueError(ValueError):
  """ ValueError when putting to the DHT """
class DHTPutTypeError(TypeError):
  """ TypeError when putting to the DHT """


def callback(event, id, data, data_len=0, res=None):
  """
  <Purpose>
    Provide the callback when DHT lookup has finished.
  <Arguments>
    event:
      the event type of the callback (see constants.py for all events)
    id:
      the 20-byte lookup id
    data:
      the data returned by the lookup
    data_len (default to 0):
      the data length
    res (default to None):
      response in case of a GET lookup
  <Exceptions>
    N/A
  <Side Effects>
    Passed to the DHT and lookup module.
  <Returns>
    None.
  """
  # define mycontext["cb"] as a dictionary with all parameters
  mycontext["cb"] = {"event": event, "id":id, "data":data, "data length": data_len, "response": res}
  # log (mycontext["cb"], "\n")

  output = "=========================\nRuntime: %s\n" % getruntime()
  if event == DHT_EVENT_SETUP_DONE:
    output += "Setup done. ID: %s\n" % id
    mycontext["setup"] = True
  elif event == DHT_EVENT_ANNOUNCE_DONE:
    output += "Announcement done. ID: %s\n" % id
    mycontext["announce"] = True
  elif event == DHT_EVENT_LOOKUP_DONE:
    output += "Lookup done. ID: %s\n" % id
    mycontext["lookup"] = True
  elif event == DHT_EVENT_VALUES:
    output += "Received values. ID: %s\n" % id
    mycontext["lookup"] = True
  elif event == DHT_EVENT_PUT_DONE:
    output += "Put done. ID: %s\n" % id
    mycontext["put"] = True
  elif event == DHT_EVENT_GET_DONE:
    output += "Get done. ID: %s\n" % id
    mycontext["get"] = True
  elif event == DHT_EVENT_VALUE_ITEM:
    output += "Received value item. ID: %s\n" % id
    mycontext["get"] = True
  elif event == DHT_EVENT_ERROR:
    output += "Invalid signature for DHT mutable put method.\n"
    mycontext["put"] = True   # we did not really complete the put, but just to stop the connection

  # if we got values for get_peers / get
  if event == DHT_EVENT_VALUES or event == DHT_EVENT_VALUE_ITEM:
    output += "Data: \n" + str(data) + "\n"
    output += "Response: \n" + str(res) + "\n"
    output += "-------------------------\n"
  elif not event == DHT_EVENT_ERROR:
    output += "Nodes (%d): \n" % data_len
    for d in data:
      if isinstance(d, tuple):
        output += d[0] + ": " + str(d[1]) + "\n"
      else:
        output += d.ip + ": " + str(d.port) + "\n"

    output += "-------------------------\n"

  log (output)


def dhtadvertise_setup(my_id, callback, peers=my_peers, keypair=None, version=None, my_port=MY_PORT,
    setup_port=SETUP_PORT):
  """
  <Purpose>
    Bootstrap our DHT client into an initial network of peers.
  <Arguments>
    my_id:
      our own string id
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    keypair (default to None):
      the keypair object in case of mutable PUT
    version (default to None):
      optional version identifier
    my_port, setup_port (default to 63101 and 63102):
      the two ports we use for lookups and receiving+responding to incoming messages respectively.
  <Exceptions>
    DHTSetupError:
      if anything goes wrong during setup.
    Other Exceptions might be raised by the setup_listen function called in this function.
  <Side Effects>
    Passed to the DHT and lookup module.
  <Returns>
    None.
  """
  try:
    # create a new DHT object
    mycontext["dht"] = dht_module.DHT(my_id, keypair, version)
    # start listening on the setup port
    listen = setup_listen(setup_port, callback)
    createthread(listen)
    # add known peers to routing table
    for p in peers:
      ip = gethostbyname(p[0])
      port = int(p[1])
      _id = p[2]
      # ping_node is the "hard" way to bootstrap - it actually sends messages to the pinged node
      # if we don"t have anything in the peersfile yet, use this
      # mycontext["dht"].ping_node(ip, port, setup_port)

      # Otherwise, we can add nodes to the routing table directly from the peerfile
      # Beware this can introduce "bad nodes", which will eventually be removed by the routing table
      if ip == my_ip and (port == setup_port or port == my_port):
        continue
      mycontext["dht"].router.add_contact(_id, ip, port, 2)   # 2 for general adding (not reply or query)

  except Exception, e:
    raise DHTSetupError("Failed to initialize DHT: %s" % repr(e))

  sleep(0.1)
  # log (mycontext["dht"].router.get_all_nodes(), "\n")
  # start the setup: lookup for own id
  mycontext["dht"].lookups.dht_lookup(my_id, 0, callback, version, setup_port)    # lookup my_id

  # call periodic
  p = periodic(setup_port)
  createthread(p)


def periodic(port):
  """
  <Purpose>
    Call the DHT periodic method when timing is right.
  """
  def perio():
    while True:
      if mycontext["dht"].to_sleep <= getruntime():
        mycontext["dht"].periodic(port, callback)
  return perio

def setup_listen(port, callback=callback):
  """
  <Purpose>
    Keep a port open for communication with other nodes until the DHT is shut down due to timeout.
  <Arguments>
    port:
      our setup port number
    callback:
      the callback method
  <Exceptions>
    DHTNoResponseError:
      if DHT has not completed the setup after timeout.
  <Side Effects>
    Called when starting up a new DHT client.
  <Returns>
    The nested listen function.
  """
  def listen():
    starttime = getruntime()
    udpresponsesocket = listenformessage(my_ip, port)

    while getruntime() < starttime + timeout:
      try:
        remoteip, remoteport, message = udpresponsesocket.getmessage()
        mycontext["dht"].new_message(message, remoteip, remoteport, port, callback)

      except SocketWouldBlockError:
        sleep(0.1)
      except SocketClosedLocal:
        break

    udpresponsesocket.close()

    # save to peerfile
    contacts = mycontext["dht"].router.get_all_nodes()
    peers = [ n.ip + "," + str(n.port) + "," + n.id + "\n" for n in contacts]
    # log (peers)
    num = peerfile.export_peers(peers, "peers.txt")
    if num > 0:
      log ("Saved %d peers to peerfile.\n" % num)
    else:
      log ("No peers to save.\n")

    if not mycontext["setup"]:
      raise DHTNoResponseError("DHT Timeout: Did not receive enough replies for Node setup.")

    exitall()
  return listen

def call_listen(operation_type, callback=callback, my_ip=my_ip, my_port=MY_PORT):
  """
  <Purpose>
    Open a port for a lookup process.
  <Arguments>
    operation_type:
      the DHT operation type that calls this listen function. For instance,
      "announce" type for announce_peer.
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    my_ip (default to the result of getmyip()):
      our own ip address
    my_port (default to 63101):
      the port used for sending and receiving lookup messages
  <Exceptions>
    DHTAdvertiseError:
      if socket is closed and the DHT operation has not completed properly.
  <Side Effects>
    Called by all DHT operation functions.
  <Returns>
    The nested listen function.
  """
  def listen():
    mycontext["lock"].acquire(True)
    starttime = getruntime()

    udpresponsesocket = listenformessage(my_ip, my_port)

    while getruntime() < starttime + timeout:
      if mycontext[operation_type]:
        break
      try:
        remoteip, remoteport, message = udpresponsesocket.getmessage()
        mycontext["dht"].new_message(message, remoteip, remoteport, my_port, callback)

      except SocketWouldBlockError:
        sleep(0.1)
      except SocketClosedLocal:
        break

    udpresponsesocket.close()
    mycontext["lock"].release()

    if not mycontext[operation_type]:
      if operation_type == "announce":
        raise DHTAdvertiseError("DHT Timeout: Failed to perform announce_peer.")
      elif operation_type == "lookup":
        raise DHTAdvertiseError("DHT Timeout: Failed to perform get_peers.")
      elif operation_type == "get":
        raise DHTAdvertiseError("DHT Timeout: Failed to perform get.")
      elif operation_type == "put":
        raise DHTAdvertiseError("DHT Timeout: Failed to perform put.")

  return listen


def dhtadvertise_lookup(my_id, target_id, callback, peers=my_peers, version=None, my_port=MY_PORT,
    setup_port=SETUP_PORT):
  """
  <Purpose>
    The DHT lookup function - for searching the ip and port values associated with a certain id.
  <Arguments>
    my_id:
      our own string id
    target_id:
      the target id for this lookup
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    version (default to None):
      optional version identifier
    my_port, setup_port (default to 63101 and 63102):
      the two ports we use for lookups and receiving+responding to incoming messages respectively.
  <Exceptions>
    Exceptions might be raised in the dhtadvertise_setup or call_listen functions which are called in
    this function.
  <Side Effects>
    Called by users to perform DHT lookups for a known target id.
  <Returns>
    The dht_lookup method which returns None.
  """
  # turn the flag
  mycontext["lookup"] = False

  target_id = str(target_id)
  if version:
    version = str(version)

  if not mycontext["setup"]:
    dhtadvertise_setup(my_id, callback, peers, version=version, my_port=my_port, setup_port=setup_port)

  while True:
    if mycontext["setup"]:
      listen = call_listen("lookup", my_port=my_port)
      createthread(listen)

      return mycontext["dht"].lookups.dht_lookup(target_id, 0, callback, version, my_port)


def dhtadvertise_announce_once(my_id, target_id, callback, peers=my_peers, port=MY_PORT, version=None,
    my_port=MY_PORT, setup_port=SETUP_PORT):
  """
  <Purpose>
    original BitTorrent method:
    Announce that the peer, controlling the querying node, is downloading a torrent on a port
    If port is not specified, automatically use the source port of the UDP packets
  <Arguments>
    my_id:
      our own string id
    target_id:
      the target id for this lookup
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    port (default to MY_PORT):
      the downloading port
    version (default to None):
      optional version identifier
    my_port, setup_port (default to 63101 and 63102):
      the two ports we use for lookups and receiving+responding to incoming messages respectively.
  <Exceptions>
    Exceptions might be raised in the dhtadvertise_setup or call_listen functions which are called in
    this function.
  <Side Effects>
    Called by users to announce a downloading port to peers.
  <Returns>
    The dht_lookup method which returns None.
  """
  # turn the flag
  mycontext["announce"] = False

  if version:
    version = str(version)
  if port < 1 or port > 65535:
    raise ValueError("Port number must be in range: 1 - 65535.")

  if not mycontext["setup"]:
    dhtadvertise_setup(my_id, callback, peers, version=version, my_port=my_port, setup_port=setup_port)

  while True:
    if mycontext["setup"]:
      listen = call_listen("announce", my_port=my_port)
      createthread(listen)

      return mycontext["dht"].lookups.dht_lookup(target_id, port, callback, version, my_port)


def dhtadvertise_put(my_id, value, callback, peers=my_peers, key=None, keypair=None,
    my_port=MY_PORT, setup_port=SETUP_PORT):
  """
  <Purpose>
    The DHT put function - for annoucing a value item to peers within the network.
    Note:
    Value accepted here: any bencoded type - list, dict, string or integer.
  <Arguments>
    my_id:
      our own string id
    value:
      the value to be put
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    key (default to None):
      the key associated with the to-be-put value
    keypair (default to None):
      optional Keypair object for mutable put
    my_port, setup_port (default to 63101 and 63102):
      the two ports we use for lookups and receiving+responding to incoming messages respectively.
  <Exceptions>
    DHTPutTypeError:
      if the parameter values are of the wrong type.
    DHTPutValueError:
      if the parameter values are not present or in the wrong format.
    Other Exceptions might be raised in the dhtadvertise_setup or call_listen functions which are
    called in this function.
  <Side Effects>
    Called by users to perform DHT put for a certain value item.
  <Returns>
    The key to the value that has been put.
  """
  # turn the flag
  mycontext["put"] = False
  _key = opts = None

  # for immutable items, key is the SHA-1 hash of the value stored
  # for mutable items, key is already available in the Keypair instance
  if keypair is None:
    _key = sha.sha_hash(str(value))
  else:
    if key is None:
      _key = keypair.key
    else:
      _key = key
    opts = keypair.opts(value)

  # log (_key, "\n")
  # log (opts, "\n")

  if value is None:
    raise DHTPutValueError("DHT Put: value is required.")
  if len(util.encoder(value)) >= 1000:
    raise DHTPutValueError("DHT Put: values must be under 1000 bytes.")

  if opts:
    if not isinstance(opts, dict):
      raise DHTPutTypeError("opts must be a dictionary if provided.")

    if opts.has_key("cas") and not isinstance(opts["cas"], int):
      raise DHTPutValueError("Mutable DHT put: cas must be an Integer if provided.")
    if not (opts.has_key("k") and len(opts["k"]) == 32):
      raise DHTPutValueError("Mutable DHT put: 32-byte k ed25519 public key is required.")
    if not (opts.has_key("sig") and len(opts["sig"]) == 64):
      raise DHTPutValueError("Mutable DHT put: 64-byte signature is required.")
    if opts.has_key("salt") and len(opts["salt"]) > 64:
      raise DHTPutValueError("Mutable DHT put: salt must be no larger than 64 bytes if provided.")
    if not opts.has_key("seq"):
      raise DHTPutValueError("Mutable DHT put: sequence number is required.")
    if not isinstance(opts["seq"], int):
      raise DHTPutValueError("Mutable DHT put: sequence number must be an Integer.")

  if not mycontext["setup"]:
    dhtadvertise_setup(my_id, callback, peers, keypair, setup_port=setup_port)

  while True:
    if mycontext["setup"]:
      listen = call_listen("put", my_port=my_port)
      createthread(listen)

      # update the dht with the possibly new keypair
      mycontext["dht"].keypair = keypair
      # 2 for put lookup
      mycontext["dht"].lookups.dht_lookup(_key, 2, callback, version=None, my_port=my_port, value=value,
          opts=opts)
      break

  return _key   # return key for future immutable lookup


def dhtadvertise_get(my_id, key, callback, peers=my_peers, my_port=MY_PORT, setup_port=SETUP_PORT):
  """
  <Purpose>
    The DHT get function - for lookup a value item based on its key within the network.
    Note: the get method does NOT require keypair, even for mutable data
  <Arguments>
    my_id:
      our own string id
    key:
      the key associated with the value we're searching for
    callback:
      the callback method
    peers (default to my_peers):
      a collection of known peers
    my_port, setup_port (default to 63101 and 63102):
      the two ports we use for lookups and receiving+responding to incoming messages respectively.
  <Exceptions>
    Exceptions might be raised in the dhtadvertise_setup or call_listen functions which are
    called in this function.
  <Side Effects>
    Called by users to perform DHT get for a certain value item.
  <Returns>
    The dht_lookup method which returns None.
  """
  # turn the flag
  mycontext["get"] = False

  if not (isinstance(key, str) and len(key) == 20):
    raise ValueError("DHT get: key must be a 20-byte string.")

  if not mycontext["setup"]:
    dhtadvertise_setup(my_id, callback, peers, setup_port=setup_port)

  while True:
    if mycontext["setup"]:
      listen = call_listen("get", my_port=my_port)
      createthread(listen)

      # 1 for get lookup
      return mycontext["dht"].lookups.dht_lookup(key, 1, callback, version=None, my_port=my_port)


def dhtadvertise_local_lookup(key):
  """
  <Purpose>
    Local lookup method in case the values we're looking for exist in local storage
  """
  addresses = dht.storage.retrieve(key)
  values = dht.storage.retrieve_value(key)
  return addresses, values


def id_from_file(filename):
  """
  <Purpose>
    Create a local file that stores a random id if it does not exist yet;
    retrieve the id value from the local file if it already exists.
  """
  file = openfile(filename, True)
  value = file.readat(20, 0)
  # if file has no content yet
  if value == "":
    random_id = util.random_id()
    file.writeat(random_id, 0)
    file.close()
    return random_id
  else:
    file.close()
    return value

def random_ids_file(filename, n):
  """
  <Purpose>
    Create a local file that stores a collection of random ids if it does not exist yet;
    retrieve the id values from the local file if it already exists.
  """
  file = openfile(filename, True)
  v = file.readat(20, 0)
  values = list()

  if v == "":
    for i in range(n):
      random_id = util.random_id()
      file.writeat(random_id, i*20)
      values.append(random_id)
    file.close()
    return values
  else:
    for i in range(n):
      values.append(file.readat(20, i*20))
    file.close()
    return values

def dhtadvertise_ping(ip, port):
  """
  <Purpose>
    Expose the DHT ping method to advertise users
  """
  dht.ping_node(ip, port)
