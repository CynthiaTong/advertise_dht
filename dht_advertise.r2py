dy_import_module_symbols("dht.r2py")
dy_import_module_symbols("random.r2py")


peers = [("bttracker.debian.org", 6881), ("router.bittorrent.com", 6881), ("router.utorrent.com", 6881)]
ip = getmyip()
port = 63101

def setup(my_id):
	createthread(listen)
	try: 
		mycontext["dht"] = DHT(my_id)
		for p in peers:
			ip = gethostbyname(p[0])
			port = p[1]
			# ping_node is the "hard" way to bootstrap - it actually sends messages to the pinged node 
			# if we don't have anything in the peersfile yet, use this  
			mycontext["dht"].ping_node(ip, port)
			sleep(0.05)
			break

	except Exception, e:
		log ("Failed to initialize DHT. " + str(e) + "\n")

	sleep(2)

	nodes = mycontext["dht"].router.get_all_nodes()
	mycontext["dht"].lookups.dht_lookup(my_id, 0, callback)		# lookup my_id 

	# refresh buckets 
	mycontext["dht"].router.refresh_buckets()


def listen():
	ip = getmyip()
	port = 63101	 # range: 63100, 63201
	udpserversocket = listenformessage(ip, port)

	while True:
	  try:	
	    remoteip, remoteport, message = udpserversocket.getmessage()
	    log ("=========================\nGot message! \n", 
	    			remoteip, ": ", remoteport, "\n", message, 
	    			"\n-------------------------\n")

	    mycontext["dht"].new_message(message, remoteip, remoteport, 1)

	  except SocketWouldBlockError:
	    sleep(0.1)
	  except SocketClosedLocal:
	    break


def callback(EVENT, id, data=None, data_len=0):
	log (EVENT, "\t", id, "\n")
