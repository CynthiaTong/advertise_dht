dy_import_module_symbols("node.r2py")
dy_import_module_symbols("time.r2py")
dy_import_module_symbols("random.r2py")

class KBucket:

	def __init__(self, min, max, ksize):
		self.min = min
		self.max = max
		self.ksize = ksize
		self.nodes = list()
		self.replacements = list() #should be a stack (set)
		self.update_last_visited()

	def update_last_visited(self):
		self.last_visited = get_time()

	# min: inclusive, max: exclusive 
	def in_range(self, node):
		return self.min <= node.long_id < self.max

	def is_new_node(self, node):
		return node not in self.nodes

	def add_node(self, node):

		if node in self.nodes:
			# move existing node to tail
			self.nodes.remove(node)
			self.nodes.append(node)
		elif len(self.nodes) < self.ksize:
			self.nodes.append(node)
		else:
			# if the node exists in replacements, move it to tail (top)
			if node in self.replacements:
				self.replacements.remove(node)
			self.replacements.append(node)
			return False

		return True

	def remove_node(self, node):
		if node not in self.nodes:
			return False

		self.nodes.remove(node)
		# try adding one node from the top of the replacement stack
		if len(self.replacements) > 0:
			replacement_node = self.replacements.pop()
			self.nodes.append(replacement_node)

		return True

	def split(self):
		if self.min >= self.max:
			log("Cannot split bucket: min >= max")
			return

		mid = (self.min + self.max) / 2
		bucket_1 = KBucket(self.min, mid, self.ksize)
		bucket_2 = KBucket(mid, self.max, self.ksize)

		for n in self.nodes:
			new_bucket = None
			if n.long_id <= mid:
				new_bucket = bucket_1
			else:
				new_bucket = bucket_2
			# new_bucket = bucket_1 if n.long_id <= mid else bucket_2
			new_bucket.add_node(n)

		return bucket_1, bucket_2

	# get all nodes (for lookups)
	def get_nodes(self):
		# bucket is contacted for lookup, update last_visited  
		self.update_last_visited()
		return self.nodes

	def node_count(self):
		return len(self.nodes)

	# return the oldest node contact in this bucket 
	def get_oldest(self):
		return self.nodes[0]

	def random_id(self):
		return random_randint(self.min, self.max)

	def __str__(self):
		output = ""
		for n in self.nodes:
			output += str(n) + "\n"
		return output


def get_time():
	timeport = list(getresources()[0]["connport"])[0]
	time_updatetime(timeport)
	return time_gettime()
