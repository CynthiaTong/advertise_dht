util = dy_import_module("util.r2py")

LOOKUP_CAPACITY = 14 
DHT_LOOKUP_EXPIRE_TIME = 62 * 60
DHT_MAX_LOOKUPS = 1024 
BUF_SIZE = 512 #BYTES 
LARGE_BUF_SIZE = 2048 


def send(buf, target_ip, target_port, my_port=63101):
  # log ("My port: %s \t Sending msg to %s : %d\n" % (my_port, target_ip, target_port))
  ip = getmyip()
  # avoid sending messages to self (will result in exception)
  if ip == target_ip and my_port == target_port:
    return 0 
  bytes = sendmessage(target_ip, int(target_port), buf, ip, int(my_port))
  if bytes == len(buf):
    return 1 
  else:
    return 0 

def add_version(version):
  if version:
    return "1:v4:" + str(version) + "1:y1:qe"
  else:
    return "1:y1:qe"

def add_version_reply(version):
  if version:
    return "1:v4:" + version + "1:y1:re"
  else:
    return "1:y1:re"


"""
  QUERY METHODS 
"""
def ping(self_id, ip, port, tid, tid_len, my_port=63101, v=None):
  buf = "d1:ad2:id20:%se1:q4:ping1:t%d:%s" % (self_id, tid_len, tid)
  buf += add_version(v)

  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

def find_node(self_id, ip, port, tid, tid_len, target_id, my_port=63101, v=None):
  buf = ("d1:ad2:id20:%s6:target20:%se1:q9:find_node1:t%d:%s" % 
        (self_id, target_id, tid_len, tid))
  buf += add_version(v)
  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

# no ipv6 support here 
def get_peers(self_id, ip, port, tid, tid_len, info_hash, my_port=63101, v=None): 
  buf = ("d1:ad2:id20:%s9:info_hash20:%se1:q9:get_peers1:t%d:%s" % 
        (self_id, info_hash, tid_len, tid))
  buf += add_version(v)
  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

def announce_peer(self_id, ip, port, tid, tid_len, info_hash, lookup_port, token, token_len, my_port=63101, v=None):
  buf = ("d1:ad2:id20:%s9:info_hash20:%s4:porti%de5:token%d:%se1:q13:announce_peer1:t%d:%s" % 
        (self_id, info_hash, lookup_port, token_len, token, tid_len, tid))
  buf += add_version(v)
  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

"""
  REPLY METHODS 
"""
def pong(self_id, ip, port, tid, tid_len, my_port=63101, v=None):
  buf = "d1:rd2:id20:%se1:t%d:%s" % (self_id, tid_len, tid)
  buf += add_version_reply(v)
  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

def send_closest_nodes(router, self_id, ip, port, tid, tid_len, target_id_str, 
                        token=None, token_len=0, peers_list=None, my_port=63101, v=None):
  target_id_long = util.bytes_to_int(target_id_str)
  nodes_list = router.get_closest_good_nodes(target_id_long)
  nodes_str = "".join(nodes_list)
  nodes_len = len(nodes_list) * 26 

  return send_nodes_peers(self_id, ip, port, tid, tid_len, nodes_str, nodes_len, peers_list, token, token_len, my_port, v)

def send_nodes_peers(self_id, ip, port, tid, tid_len, nodes_str, nodes_len, peers_list, token, token_len, my_port, v):
  buf = "d1:rd2:id20:%s" % self_id 
  # add nodes string if no peers_list is provided 
  # either it's a find_node, or no peer values found for get_peers)
  if not peers_list:
    buf += "5:nodes%d:%s" % (nodes_len, nodes_str)

  if token_len > 0:
    buf += "5:token%d:%s" % (token_len, token)

  if peers_list and len(peers_list) > 0:
    buf += "6:valuesl"
    for p in peers_list:
      # !! port needs to be big endian 
      buf += "%d:%s%s" % (6, util.ip_as_bytes(p.ip), str(util.htons(p.port)))
      # log (list(ip_as_bytes(p.ip)+str(htons(p.port))), "\n")
    buf += "e"

  if util.tid_match(tid, "fn"):
    buf += "1:q9:find_node1:t%d:%s" % (tid_len, tid)
  elif util.tid_match(tid, "gp"):
    buf += "1:q9:get_peers1:t%d:%s" % (tid_len, tid)

  buf += add_version_reply(v)
  if len(buf) <= LARGE_BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

def peer_announced(self_id, ip, port, tid, tid_len, my_port=63101, v=None):
  buf = "d1:rd2:id20:%se1:t%d:%s" % (self_id, tid_len, tid)
  buf += add_version_reply(v)
  if len(buf) <= BUF_SIZE:
    log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

def send_error(ip, port, tid, tid_len, error_code, error_msg, my_port=63101, v=None):
  msg_len = len(error_msg)
  buf = "d1:eli%de%d:%s" % (error_code, msg_len, error_msg)
  buf += "e1:t%d:%s" % (tid_len, tid)
  buf += add_version_reply(v) + "e"
  if len(buf) <= BUF_SIZE:
    # log (buf, "\n")
    return send(buf, ip, port, my_port)
  return 0 

"""
  PUT 
"""

def put(self_id, value, ip, port, tid, token, my_port=63101, opts=None):
  # for key, val in opts.items():
  #   log (key, " ", val, "\n")
  msg = {
    "a": {
      "id": self_id,
      "token": token,
      "v": value 
    },
    "t": tid, 
    "y": "q",
    "q": "put"
  }

  if opts:
    msg["a"]["k"] = opts["k"]
    if opts.has_key("seq"):
      msg["a"]["seq"] = opts["seq"]   # needs be larger than existing seq! 
    else:
      log ("no seq provided.\n")
      # increment from existing record?? 

    msg["a"]["sig"] = opts["sig"]

    if opts.has_key("salt"):
      msg["a"]["salt"] = opts["salt"]

    if opts.has_key("cas"):
      msg["a"]["cas"] = opts["cas"]

  msg = util.encoder(msg)
  return send(msg, ip, port, my_port)


def send_put(self_id, ip, port, tid, my_port=63101):
  msg = util.encoder({"r":{"id": self_id}, "t": tid, "y": "r"})
  return send(msg, ip, port, my_port)


"""
  GET 
"""
def get(self_id, target_id, ip, port, tid, my_port=63101):
  msg = {
    "a": {
      "id": self_id,
      "target": target_id 
    },
    "t": tid,
    "y": "q",
    "q": "get"
  }
  return send(util.encoder(msg), ip, port, my_port)

# Note: value_obj is always a dictionary 
def send_get(self_id, ip, port, value_obj, nodes_str, tid, token, my_port=63101):

  msg = {
    "r": {
      "id": self_id,
      "token": token,
      "v": "",    # placeholder 
      "nodes": nodes_str
    },
    "t": tid,
    "y": "r"
  }

  if value_obj:
    msg["r"]["v"] = value_obj["a"]["v"]
    opts = value_obj["a"]
    # additional mutable info 
    if opts.has_key("k"):
      msg["r"]["k"] = opts["k"]
    if opts.has_key("seq"):
      msg["r"]["seq"] = opts["seq"]
    if opts.has_key("sig"):
      msg["r"]["sig"] = opts["sig"]
  
  return send(util.encoder(msg), ip, port, my_port)
