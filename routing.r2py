dy_import_module_symbols("bucket.r2py")
dy_import_module_symbols("time.r2py")

class RoutingTable:

	def __init__(self, sourceNode, ksize):
		self.sourceNode = sourceNode
		self.ksize = ksize 
		self.initial_bucket()
		self.bucket_count = 1 

	def initial_bucket(self):
		self.buckets = [KBucket(0, 2**160, self.ksize)]

	# find proper bucket for contact (id in bucket's range)
	def find_bucket(self, node):
		for b in self.buckets:
			if b.in_range(node):
				return self.buckets.index(b)

		raise ValueError("Node ID not in range: 0 - 2**160")

	def split_bucket(self, index):
		bucket_1, bucket_2 = self.buckets[index].split()
		self.buckets[index] = bucket_1 
		self.buckets.insert(index+1, bucket_2)
		self.bucket_count += 1 

	def remove_contact(self, node):
		index = self.find_bucket(node)
		self.buckets[index].remove_node(node)

	def add_contact(self, node):
		index = self.find_bucket(node)
		bucket = self.buckets[index]

		if bucket.add_node(node):
			return  

		# if table's owner node is in the bucket, split 
		if bucket.in_range(self.sourceNode):
			self.split_bucket(index)
			# try adding again 
			self.add_contact(node)
		#else: 
			#PING? 
			# alternatively, only remove contact when it's unresponsive to other RPCs 

	# get buckets that haven't been queried in the last hour 
	def get_unvisited_buckets(self):
		return [b for b in self.buckets if get_time() - b.last_visited >= 3600]

def get_time():
	timeport = list(getresources()[0]["connport"])[0]
	time_updatetime(timeport)
	return time_gettime()