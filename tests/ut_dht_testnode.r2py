"""
  <Purpose> Test DHT Node class properties and methods
"""

node = dy_import_module("node.r2py")
util = dy_import_module("util.r2py")
random = dy_import_module("random.r2py")

random_id = random.random_randombytes(20)

def test_init():
  try:
    n = node.Node(random_id, "127.0.0.1", 3000)
  except Exception, e:
    log ("Error initializing node" + str(e) + "\n")

def test_node_id():
  n = node.Node(random_id, "127.0.0.1", 3000)
  assert len(n.id) == 20, "Error: node id is not 20 bytes."
  assert n.long_id == util.bytes_to_int(n.id), "Error: wrong node long_id."

def test_node_dist():
  n1 = node.Node(random_id, "111.222.33.4", 5000)
  n2 = node.Node(random.random_randombytes(20), "111.322.33.4", 9000)
  n3 = node.Node(random.random_randombytes(20), "111.322.43.4", 7800)

  dist1 = n1.distance_to(n2)
  dist2 = n1.distance_to(n3)

  assert dist1 == n1.long_id ^ n2.long_id, "Error: wrong XOR distance calculated."
  assert n1.compare_distance(n2, n3) == (dist1 - dist2), "Error: wrong result for compare_distance method."

def test_good_node():
  n = node.Node(random_id, "124.325.43.24", 32040)
  assert n.good_node() == True, "good_node() should return True for a new node."

  n.pinged = 3
  assert n.good_node() == False, "Error: good_node() returns true even though node.pinged >= 3."

  n.pinged = 0
  n.last_replied = getruntime() - 60*15
  assert n.good_node() == False, "Error: wrong good_node() return value."

  n.replied = 1
  assert n.good_node() == True, "Error: wrong good_node() return value."


if callfunc == "initialize":
  test_init()
  test_node_id()
  test_node_dist()
  test_good_node()
