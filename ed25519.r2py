"""
Adapted from warner's python-pure25519 repo at: https://github.com/warner/python-pure25519
SHA 512 implementation from Thomas Dixon's sha2 repo at: https://github.com/thomdixon/pysha2/blob/master/sha2/sha512.py

"""

binascii = dy_import_module("binascii.r2py")
random = dy_import_module("random.r2py")
util = dy_import_module("util.r2py")

SECRETKEYBYTES = 64
PUBLICKEYBYTES = 32
SIGNATUREKEYBYTES = 64


def _sha_long2bytesBigEndian(n, thisblocksize=0):
    """Convert a long integer to a byte string.

    If optional blocksize is given and greater than zero, pad the front
    of the byte string with binary zeros so that the length is a multiple
    of blocksize.
    """

    # Justin: I changed this to avoid using pack. I didn't test performance, etc
    s = ''
    while n > 0:
        #original:
        # s = struct.pack('>I', n & 0xffffffffL) + s
        # n = n >> 32
        s = chr(n & 0xff) + s
        n = n >> 8

    # Strip off leading zeros.
    for i in range(len(s)):
        if s[i] <> '\000':
            break
    else:
        # Only happens when n == 0.
        s = '\000'
        i = 0

    s = s[i:]

    # Add back some pad bytes. This could be done more efficiently
    # w.r.t. the de-padding being done above, but sigh...
    if thisblocksize > 0 and len(s) % thisblocksize:
        s = (thisblocksize - len(s) % thisblocksize) * '\000' + s

    return s


def _sha_bytelist2longlongBigEndian(list):
    "Transform a list of characters into a list of long longs (64 bits)."

    imax = len(list)/8
    hl = [0] * imax

    j = 0
    i = 0
    while i < imax:
        b0 = long(ord(list[j])) << 56
        b1 = long(ord(list[j+1])) << 48
        b2 = long(ord(list[j+2])) << 40
        b3 = long(ord(list[j+3])) << 32
        b4 = long(ord(list[j+4])) << 24
        b5 = long(ord(list[j+5])) << 16
        b6 = long(ord(list[j+6])) << 8
        b7 = long(ord(list[j+7]))
        hl[i] = b0 | b1 | b2 | b3 | b4 | b5 | b6 | b7
        i = i+1
        j = j+8

    return hl


################################
# sha512.py
################################

def new(m=None):
  return sha512(m)

class sha512(object):
  _k = (0x428a2f98d728ae22L, 0x7137449123ef65cdL, 0xb5c0fbcfec4d3b2fL, 0xe9b5dba58189dbbcL,
      0x3956c25bf348b538L, 0x59f111f1b605d019L, 0x923f82a4af194f9bL, 0xab1c5ed5da6d8118L,
      0xd807aa98a3030242L, 0x12835b0145706fbeL, 0x243185be4ee4b28cL, 0x550c7dc3d5ffb4e2L,
      0x72be5d74f27b896fL, 0x80deb1fe3b1696b1L, 0x9bdc06a725c71235L, 0xc19bf174cf692694L,
      0xe49b69c19ef14ad2L, 0xefbe4786384f25e3L, 0x0fc19dc68b8cd5b5L, 0x240ca1cc77ac9c65L,
      0x2de92c6f592b0275L, 0x4a7484aa6ea6e483L, 0x5cb0a9dcbd41fbd4L, 0x76f988da831153b5L,
      0x983e5152ee66dfabL, 0xa831c66d2db43210L, 0xb00327c898fb213fL, 0xbf597fc7beef0ee4L,
      0xc6e00bf33da88fc2L, 0xd5a79147930aa725L, 0x06ca6351e003826fL, 0x142929670a0e6e70L,
      0x27b70a8546d22ffcL, 0x2e1b21385c26c926L, 0x4d2c6dfc5ac42aedL, 0x53380d139d95b3dfL,
      0x650a73548baf63deL, 0x766a0abb3c77b2a8L, 0x81c2c92e47edaee6L, 0x92722c851482353bL,
      0xa2bfe8a14cf10364L, 0xa81a664bbc423001L, 0xc24b8b70d0f89791L, 0xc76c51a30654be30L,
      0xd192e819d6ef5218L, 0xd69906245565a910L, 0xf40e35855771202aL, 0x106aa07032bbd1b8L,
      0x19a4c116b8d2d0c8L, 0x1e376c085141ab53L, 0x2748774cdf8eeb99L, 0x34b0bcb5e19b48a8L,
      0x391c0cb3c5c95a63L, 0x4ed8aa4ae3418acbL, 0x5b9cca4f7763e373L, 0x682e6ff3d6b2b8a3L,
      0x748f82ee5defb2fcL, 0x78a5636f43172f60L, 0x84c87814a1f0ab72L, 0x8cc702081a6439ecL,
      0x90befffa23631e28L, 0xa4506cebde82bde9L, 0xbef9a3f7b2c67915L, 0xc67178f2e372532bL,
      0xca273eceea26619cL, 0xd186b8c721c0c207L, 0xeada7dd6cde0eb1eL, 0xf57d4f7fee6ed178L,
      0x06f067aa72176fbaL, 0x0a637dc5a2c898a6L, 0x113f9804bef90daeL, 0x1b710b35131c471bL,
      0x28db77f523047d84L, 0x32caab7b40c72493L, 0x3c9ebe0a15c9bebcL, 0x431d67c49c100d4cL,
      0x4cc5d4becb3e42b6L, 0x597f299cfc657e2aL, 0x5fcb6fab3ad6faecL, 0x6c44198c4a475817L)
  _h = (0x6a09e667f3bcc908L, 0xbb67ae8584caa73bL, 0x3c6ef372fe94f82bL, 0xa54ff53a5f1d36f1L,
      0x510e527fade682d1L, 0x9b05688c2b3e6c1fL, 0x1f83d9abfb41bd6bL, 0x5be0cd19137e2179L)
  _output_size = 8

  blocksize = 1
  block_size = 128
  digest_size = 64

  def __init__(self, m=None):
    self._buffer = ''
    self._counter = 0
    self.m = m

    if m is not None:
      if type(m) is not str:
        raise TypeError, 'argument 1 must be string, not %s' % (type(m))
      self.update(m)

  def _rotr(self, x, y):
      return ((x >> y) | (x << (64-y))) & 0xFFFFFFFFFFFFFFFF


  def _sha512_process(self, chunk):

    w = [0]*80
    # w[0:16] = struct.unpack('!16Q', chunk)  # long long
    w[0:16] = _sha_bytelist2longlongBigEndian(chunk)

    for i in range(16, 80):
      s0 = self._rotr(w[i-15], 1) ^ self._rotr(w[i-15], 8) ^ (w[i-15] >> 7)
      s1 = self._rotr(w[i-2], 19) ^ self._rotr(w[i-2], 61) ^ (w[i-2] >> 6)
      w[i] = (w[i-16] + s0 + w[i-7] + s1) & 0xFFFFFFFFFFFFFFFF

    a,b,c,d,e,f,g,h = self._h

    for i in range(80):
      s0 = self._rotr(a, 28) ^ self._rotr(a, 34) ^ self._rotr(a, 39)
      maj = (a & b) ^ (a & c) ^ (b & c)
      t2 = s0 + maj
      s1 = self._rotr(e, 14) ^ self._rotr(e, 18) ^ self._rotr(e, 41)
      ch = (e & f) ^ ((~e) & g)
      t1 = h + s1 + ch + self._k[i] + w[i]

      h = g
      g = f
      f = e
      e = (d + t1) & 0xFFFFFFFFFFFFFFFF
      d = c
      c = b
      b = a
      a = (t1 + t2) & 0xFFFFFFFFFFFFFFFF

    self._h = [(x+y) & 0xFFFFFFFFFFFFFFFF for x,y in zip(self._h, [a,b,c,d,e,f,g,h])]

  def update(self, m):
    if not m:
      return
    if type(m) is not str:
      raise TypeError, 'argument 1 must be string, not %s' % (type(m))

    self._buffer += m
    self._counter += len(m)

    while len(self._buffer) >= 128:
      self._sha512_process(self._buffer[:128])
      self._buffer = self._buffer[128:]

  def digest(self):
    mdi = self._counter & 0x7F
    length = _sha_long2bytesBigEndian(self._counter<<3, thisblocksize=8)

    if mdi < 112:
      padlen = 111-mdi
    else:
      padlen = 239-mdi

    r = new(self.m)
    # log (len('\x80'+('\x00'*(padlen+8))+length), "\n")
    r.update('\x80'+('\x00'*(padlen+8))+length)

    # for i in r._h[:self._output_size]:
    #   log(i, "\n")
    #   log(_sha_long2bytesBigEndian(i))

    return ''.join([_sha_long2bytesBigEndian(i) for i in r._h[:self._output_size]])

  def hexdigest(self):
    return ''.join(['%02x' % ord(c) for c in self.digest()])


################################
# basic.py
################################

Q = 2**255 - 19
L = 2**252 + 27742317777372353535851937790883648493

def inv(x):
  return pow(x, Q-2, Q)

d = -121665 * inv(121666)
I = pow(2,(Q-1)//4,Q)

def xrecover(y):
  xx = (y*y-1) * inv(d*y*y+1)
  x = pow(xx,(Q+3)//8,Q)
  if (x*x - xx) % Q != 0: x = (x*I) % Q
  if x % 2 != 0: x = Q-x
  return x

By = 4 * inv(5)
Bx = xrecover(By)
B = [Bx % Q,By % Q]

# Extended Coordinates: x=X/Z, y=Y/Z, x*y=T/Z
# http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html

def xform_affine_to_extended(pt):
  (x, y) = pt
  return (x%Q, y%Q, 1, (x*y)%Q) # (X,Y,Z,T)

def xform_extended_to_affine(pt):
  (x, y, z, _) = pt
  return ((x*inv(z))%Q, (y*inv(z))%Q)

def double_element(pt): # extended->extended
  # dbl-2008-hwcd
  (X1, Y1, Z1, _) = pt
  A = (X1*X1)
  B = (Y1*Y1)
  C = (2*Z1*Z1)
  D = (-A) % Q
  J = (X1+Y1) % Q
  E = (J*J-A-B) % Q
  G = (D+B) % Q
  F = (G-C) % Q
  H = (D-B) % Q
  X3 = (E*F) % Q
  Y3 = (G*H) % Q
  Z3 = (F*G) % Q
  T3 = (E*H) % Q
  return (X3, Y3, Z3, T3)

def add_elements(pt1, pt2): # extended->extended
  # add-2008-hwcd-3 . Slightly slower than add-2008-hwcd-4, but -3 is
  # unified, so it's safe for general-purpose addition
  (X1, Y1, Z1, T1) = pt1
  (X2, Y2, Z2, T2) = pt2
  A = ((Y1-X1)*(Y2-X2)) % Q
  B = ((Y1+X1)*(Y2+X2)) % Q
  C = T1*(2*d)*T2 % Q
  D = Z1*2*Z2 % Q
  E = (B-A) % Q
  F = (D-C) % Q
  G = (D+C) % Q
  H = (B+A) % Q
  X3 = (E*F) % Q
  Y3 = (G*H) % Q
  T3 = (E*H) % Q
  Z3 = (F*G) % Q
  return (X3, Y3, Z3, T3)

def scalarmult_element_safe_slow(pt, n):
  # this form is slightly slower, but tolerates arbitrary points, including
  # those which are not in the main 1*L subgroup. This includes points of
  # order 1 (the neutral element Zero), 2, 4, and 8.
  assert n >= 0
  if n==0:
    return xform_affine_to_extended((0,1))
  _ = double_element(scalarmult_element_safe_slow(pt, n>>1))
  if n&1:
    return add_elements(_, pt)
  else:
    return _

def _add_elements_nonunfied(pt1, pt2): # extended->extended
  # add-2008-hwcd-4 : NOT unified, only for pt1!=pt2. About 10% faster than
  # the (unified) add-2008-hwcd-3, and safe to use inside scalarmult if you
  # aren't using points of order 1/2/4/8
  (X1, Y1, Z1, T1) = pt1
  (X2, Y2, Z2, T2) = pt2
  A = ((Y1-X1)*(Y2+X2)) % Q
  B = ((Y1+X1)*(Y2-X2)) % Q
  C = (Z1*2*T2) % Q
  D = (T1*2*Z2) % Q
  E = (D+C) % Q
  F = (B-A) % Q
  G = (B+A) % Q
  H = (D-C) % Q
  X3 = (E*F) % Q
  Y3 = (G*H) % Q
  Z3 = (F*G) % Q
  T3 = (E*H) % Q
  return (X3, Y3, Z3, T3)

def scalarmult_element(pt, n): # extended->extended
  # This form only works properly when given points that are a member of
  # the main 1*L subgroup. It will give incorrect answers when called with
  # the points of order 1/2/4/8, including point Zero. (it will also work
  # properly when given points of order 2*L/4*L/8*L)
  assert n >= 0
  if n==0:
    return xform_affine_to_extended((0,1))
  _ = double_element(scalarmult_element(pt, n>>1))
  if n&1:
    return _add_elements_nonunfied(_, pt)
  else:
    return _

# points are encoded as 32-bytes little-endian, b255 is sign, b2b1b0 are 0

def encodepoint(P):
  x = P[0]
  y = P[1]
  # MSB of output equals x.b0 (=x&1)
  # rest of output is little-endian y
  assert 0 <= y < (1<<255) # always < 0x7fff..ff
  if x & 1:
      y += 1<<255
  return binascii.binascii_a2b_hex("%064x" % y)[::-1]

def isoncurve(P):
  x = P[0]
  y = P[1]
  return (-x*x + y*y - 1 - d*x*x*y*y) % Q == 0

class NotOnCurve(Exception):
  pass

def decodepoint(s):
  unclamped = int(binascii.binascii_b2a_hex(s[:32][::-1]), 16)
  clamp = (1 << 255) - 1
  y = unclamped & clamp # clear MSB
  x = xrecover(y)
  if bool(x & 1) != bool(unclamped & (1<<255)): x = Q-x
  P = [x,y]
  if not isoncurve(P): raise NotOnCurve("decoding point that is not on curve")
  return P

# scalars are encoded as 32-bytes little-endian

def bytes_to_scalar(s):
  # assert len(s) == 32, len(s)
  return int(binascii.binascii_b2a_hex(s[::-1]), 16)

def bytes_to_clamped_scalar(s):
  # Ed25519 private keys clamp the scalar to ensure two things:
  #   1: integer value is in L/2 .. L, to avoid small-logarithm
  #      non-wraparaound
  #   2: low-order 3 bits are zero, so a small-subgroup attack won't learn
  #      any information
  # set the top two bits to 01, and the bottom three to 000
  a_unclamped = bytes_to_scalar(s)
  AND_CLAMP = (1<<254) - 1 - 7
  OR_CLAMP = (1<<254)
  a_clamped = (a_unclamped & AND_CLAMP) | OR_CLAMP
  return a_clamped

def random_scalar(entropy_f): # 0..L-1 inclusive
  # reduce the bias to a safe level by generating 256 extra bits
  oversized = int(binascii.binascii_b2a_hex(entropy_f(32+32)), 16)
  return oversized % L

def password_to_scalar(pw):
  oversized = new(pw).digest()
  return int(oversized, 16) % L

def scalar_to_bytes(y):
  y = y % L
  assert 0 <= y < 2**256
  return binascii.binascii_a2b_hex("%064x" % y)[::-1]

# Elements, of various orders

def is_extended_zero(XYTZ):
  # catch Zero
  (X, Y, Z, T) = XYTZ
  Y = Y % Q
  Z = Z % Q
  if X==0 and Y==Z and Y!=0:
      return True
  return False

class ElementOfUnknownGroup:
  # This is used for points of order 2,4,8,2*L,4*L,8*L
  def __init__(self, XYTZ):
    assert isinstance(XYTZ, tuple)
    assert len(XYTZ) == 4
    self.XYTZ = XYTZ

  def add(self, other):
    if not isinstance(other, ElementOfUnknownGroup):
      raise TypeError("elements can only be added to other elements")
    sum_XYTZ = add_elements(self.XYTZ, other.XYTZ)
    if is_extended_zero(sum_XYTZ):
      return Zero
    return ElementOfUnknownGroup(sum_XYTZ)

  def scalarmult(self, s):
    if isinstance(s, ElementOfUnknownGroup):
      raise TypeError("elements cannot be multiplied together")
    assert s >= 0
    product = scalarmult_element_safe_slow(self.XYTZ, s)
    return ElementOfUnknownGroup(product)

  def to_bytes(self):
    return encodepoint(xform_extended_to_affine(self.XYTZ))
  # def __eq__(self, other):
  #   return self.to_bytes() == other.to_bytes()
  # def __ne__(self, other):
  #   return not self == other
  def equals(self, other):
    return self.to_bytes() == other.to_bytes()
  def not_equal(self, other):
    return not self == other

class Element(ElementOfUnknownGroup):
  # this only holds elements in the main 1*L subgroup. It never holds Zero,
  # or elements of order 1/2/4/8, or 2*L/4*L/8*L.

  def add(self, other):
    if not isinstance(other, ElementOfUnknownGroup):
        raise TypeError("elements can only be added to other elements")
    sum_element = ElementOfUnknownGroup.add(self, other)
    if sum_element is Zero:
      return sum_element
    if isinstance(other, Element):
      # adding two subgroup elements results in another subgroup
      # element, or Zero, and we've already excluded Zero
      return Element(sum_element.XYTZ)
    # not necessarily a subgroup member, so assume not
    return sum_element

  def scalarmult(self, s):
    if isinstance(s, ElementOfUnknownGroup):
      raise TypeError("elements cannot be multiplied together")
    # scalarmult of subgroup members can be done modulo the subgroup
    # order, and using the faster non-unified function.
    s = s % L
    # scalarmult(s=0) gets you Zero
    if s == 0:
      return Zero
    # scalarmult(s=1) gets you self, which is a subgroup member
    # scalarmult(s<grouporder) gets you a different subgroup member
    return Element(scalarmult_element(self.XYTZ, s))

  # negation and subtraction only make sense for the main subgroup
  def negate(self):
    # slow. Prefer e.scalarmult(-pw) to e.scalarmult(pw).negate()
    return Element(scalarmult_element(self.XYTZ, L-2))
  def subtract(self, other):
    return self.add(other.negate())

class _ZeroElement(ElementOfUnknownGroup):
  def add(self, other):
    return other # zero+anything = anything
  def scalarmult(self, s):
    return self # zero*anything = zero
  def negate(self):
    return self # -zero = zero
  def subtract(self, other):
    return self.add(other.negate())


Base = Element(xform_affine_to_extended(B))
Zero = _ZeroElement(xform_affine_to_extended((0,1))) # the neutral (identity) element

_zero_bytes = Zero.to_bytes()


def arbitrary_element(seed): # unknown DL
  hseed = new(seed).digest()
  y = int(hseed, 16) % Q

  # we try successive Y values until we find a valid point
  plus = 0
  while True:
    y_plus = (y + plus) % Q
    x = xrecover(y_plus)
    Pa = [x,y_plus] # no attempt to use both "positive" and "negative" X

    # only about 50% of Y coordinates map to valid curve points (I think
    # the other half give you points on the "twist").
    if not isoncurve(Pa):
      plus += 1
      continue

    P = ElementOfUnknownGroup(xform_affine_to_extended(Pa))
    # even if the point is on our curve, it may not be in our particular
    # (order=L) subgroup. The curve has order 8*L, so an arbitrary point
    # could have order 1,2,4,8,1*L,2*L,4*L,8*L (everything which divides
    # the group order).

    # [I MAY BE COMPLETELY WRONG ABOUT THIS, but my brief statistical
    # tests suggest it's not too far off] There are phi(x) points with
    # order x, so:
    #  1 element of order 1: [(x=0,y=1)=Zero]
    #  1 element of order 2 [(x=0,y=-1)]
    #  2 elements of order 4
    #  4 elements of order 8
    #  L-1 elements of order L (including Base)
    #  L-1 elements of order 2*L
    #  2*(L-1) elements of order 4*L
    #  4*(L-1) elements of order 8*L

    # So 50% of random points will have order 8*L, 25% will have order
    # 4*L, 13% order 2*L, and 13% will have our desired order 1*L (and a
    # vanishingly small fraction will have 1/2/4/8). If we multiply any
    # of the 8*L points by 2, we're sure to get an 4*L point (and
    # multiplying a 4*L point by 2 gives us a 2*L point, and so on).
    # Multiplying a 1*L point by 2 gives us a different 1*L point. So
    # multiplying by 8 gets us from almost any point into a uniform point
    # on the correct 1*L subgroup.

    P8 = P.scalarmult(8)

    # if we got really unlucky and picked one of the 8 low-order points,
    # multiplying by 8 will get us to the identity (Zero), which we check
    # for explicitly.
    if is_extended_zero(P8.XYTZ):
      plus += 1
      continue

    # Test that we're finally in the right group. We want to scalarmult
    # by L, and we want to *not* use the trick in Group.scalarmult()
    # which does x%L, because that would bypass the check we care about.
    # P is still an _ElementOfUnknownGroup, which doesn't use x%L because
    # that's not correct for points outside the main group.
    assert is_extended_zero(P8.scalarmult(L).XYTZ)

    return Element(P8.XYTZ)
  # never reached

def bytes_to_unknown_group_element(bytes):
  # this accepts all elements, including Zero and wrong-subgroup ones
  if bytes == _zero_bytes:
    return Zero
  XYTZ = xform_affine_to_extended(decodepoint(bytes))
  return ElementOfUnknownGroup(XYTZ)

def bytes_to_element(bytes):
  # this strictly only accepts elements in the right subgroup
  P = bytes_to_unknown_group_element(bytes)
  if P is Zero:
    raise ValueError("element was Zero")
  if not is_extended_zero(P.scalarmult(L).XYTZ):
    raise ValueError("element is not in the right group")
  # the point is in the expected 1*L subgroup, not in the 2/4/8 groups,
  # or in the 2*L/4*L/8*L groups. Promote it to a correct-group Element.
  return Element(P.XYTZ)


################################
# eddsa.py
################################

def H(m):
    return new(m).digest()

def eddsa_publickey(seed):
    assert len(seed) == 32
    a = bytes_to_clamped_scalar(H(seed)[:32])
    A = Base.scalarmult(a)
    return A.to_bytes()

def Hint(m):
    h = H(m)
    return int(binascii.binascii_b2a_hex(h[::-1]), 16)

def signature(m,sk,pk):
    assert len(sk) == 32 # seed
    assert len(pk) == 32
    h = H(sk[:32])
    a_bytes, inter = h[:32], h[32:]
    a = bytes_to_clamped_scalar(a_bytes)
    r = Hint(inter + m)
    R = Base.scalarmult(r)
    R_bytes = R.to_bytes()
    S = r + Hint(R_bytes + pk + m) * a
    return R_bytes + scalar_to_bytes(S)

def checkvalid(s, m, pk):
    if len(s) != 64: raise Exception("signature length is wrong")
    if len(pk) != 32: raise Exception("public-key length is wrong")
    R = bytes_to_element(s[:32])
    A = bytes_to_element(pk)
    S = bytes_to_scalar(s[32:])
    h = Hint(s[:32] + pk + m)
    v1 = Base.scalarmult(S)
    v2 = R.add(A.scalarmult(h))
    return v1.equals(v2)

# wrappers

def create_signing_key():
    seed = random.random_randombytes(32)
    return seed
def create_verifying_key(signing_key):
    return eddsa_publickey(signing_key)

def sign(skbytes, msg):
    """Return just the signature, given the message and just the secret
    key."""
    if len(skbytes) != 32:
        raise ValueError("Bad signing key length %d" % len(skbytes))
    vkbytes = create_verifying_key(skbytes)
    sig = signature(msg, skbytes, vkbytes)
    return sig

def verify(vkbytes, sig, msg):
    if len(vkbytes) != 32:
        raise ValueError("Bad verifying key length %d" % len(vkbytes))
    if len(sig) != 64:
        raise ValueError("Bad signature length %d" % len(sig))
    rc = checkvalid(sig, msg, vkbytes)
    if not rc:
        raise ValueError("rc != 0", rc)
    return True

################################
# _ed25519.py
################################

# adapt pure25519/ed25519.py to behave like (C/glue) ed25519/_ed25519.py, so
# ed25519_oop.py doesn't have to change

# ed25519 secret/private/signing keys can be built from a 32-byte random seed
# (clamped and treated as a scalar). The public/verifying key is a 32-byte
# encoded group element. Signing requires both, so a common space/time
# tradeoff is to glue the two together and call the 64-byte combination the
# "secret key". Signatures are 64 bytes (one encoded group element and one
# encoded scalar). The NaCl code prefers to glue the signature to the
# message, rather than pass around detacted signatures.
#
# for clarity, we use the following notation:
#  seed: 32-byte secret random seed (unclamped)
#  sk: = seed
#  vk: 32-byte verifying key (encoded group element)
#  seed+vk: 64-byte glue thing (sometimes stored as secret key)
#  sig: 64-byte detached signature (R+S)
#  sig+msg: signature concatenated to message

# that glue provides:
#  SECRETKEYBYTES=64, PUBLICKEYBYTES=32, SIGNATUREBYTES=64
#  (vk,seed+vk)=publickey(seed)
#  sig+msg = sign(msg, seed+vk)
#  msg = open(sig+msg, vk) # or raise BadSignatureError

# pure25519/ed25519.py provides:
#  vk = publickey(sk)
#  sig = signature(msg, sk or sk+vk, vk)
#  bool = checkvalid(sig, msg, vk)

class BadSignatureError(Exception):
  pass

def publickey(seed32):
  assert len(seed32) == 32
  vk32 = eddsa_publickey(seed32)
  return vk32, seed32+vk32

def ed25519_sign(msg, skvk):
  assert len(skvk) == 64
  sk = skvk[:32]
  vk = skvk[32:]
  sig = signature(msg, sk, vk)
  return sig+msg

def ed25519_open(sigmsg, vk):
  assert len(vk) == 32
  sig = sigmsg[:64]
  msg = sigmsg[64:]
  try:
    valid = checkvalid(sig, msg, vk)
  except ValueError as e:
    raise BadSignatureError(e)
  except Exception as e:
    if str(e) == "decoding point that is not on curve":
      raise BadSignatureError(e)
    raise
  if not valid:
    raise BadSignatureError()
  return msg


################################
# ed25519_oop.py
################################

def create_keypair():
  SEEDLEN = int(SECRETKEYBYTES/2)
  assert SEEDLEN == 32
  seed = random.random_randombytes(SEEDLEN)
  sk = SigningKey(seed)
  vk = sk.get_verifying_key()
  return sk, vk

class BadPrefixError(Exception):
  pass

def remove_prefix(s_bytes, prefix):
  assert(type(s_bytes) == type(prefix))
  if s_bytes[:len(prefix)] != prefix:
      raise BadPrefixError("did not see expected '%s' prefix" % (prefix,))
  return s_bytes[len(prefix):]

class SigningKey(object):
  # this can only be used to reconstruct a key created by create_keypair().
  def __init__(self, sk_s):
    assert isinstance(sk_s, str)
    if len(sk_s) == 32:
      # create from seed
      vk_s, sk_s = publickey(sk_s)
    else:
      if len(sk_s) != 32+32:
        raise ValueError("SigningKey takes 32-byte seed or 64-byte string")
    self.sk_s = sk_s # seed+pubkey
    self.vk_s = sk_s[32:] # just pubkey

  def equals(self, them):
    if not isinstance(them, object): return False
    return (type(them) is SigningKey and them.sk_s == self.sk_s)

  def get_verifying_key(self):
    return VerifyingKey(self.vk_s)

  def sign(self, msg):
    assert isinstance(msg, str)
    sig_and_msg = ed25519_sign(msg, self.sk_s)
    # the response is R+S+msg
    sig_R = sig_and_msg[0:32]
    sig_S = sig_and_msg[32:64]
    msg_out = sig_and_msg[64:]
    sig_out = sig_R + sig_S
    assert msg_out == msg
    return sig_out

class VerifyingKey(object):
  def __init__(self, vk_s):
    assert isinstance(vk_s, str)
    assert len(vk_s) == 32
    self.vk_s = vk_s

  def equals(self, them):
    if not isinstance(them, object): return False
    return (type(them) is VerifyingKey and them.vk_s == self.vk_s)

  def verify(self, sig, msg):
    assert isinstance(sig, str)
    assert isinstance(msg, str)
    assert len(sig) == 64
    sig_R = sig[:32]
    sig_S = sig[32:]
    sig_and_msg = sig_R + sig_S + msg
    # this might raise BadSignatureError
    msg2 = ed25519_open(sig_and_msg, self.vk_s)
    assert msg2 == msg


def selftest():
  message = "crypto libraries should always test themselves at powerup"
  sk, vk = create_keypair()
  # log (sk.sk_s, "\n", vk.vk_s, "\n")
  assert sk.get_verifying_key().equals(vk)
  sig = sk.sign(message)

  vk.verify(sig, message)

  # sha = new("helloworld!!").hexdigest()
  # log (sha, "\n")

if callfunc == "initialize":
  selftest()
