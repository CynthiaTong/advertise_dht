util = dy_import_module("util.r2py")

class Node:
  """
    <Purpose>
    Nodes stores peer information. It's the basic data unit in a Bucket. 
    <Side Effects>
    Used by the Bucket Module.  
    <Example Use>
    # create a node  
    node = Node(<20-byte id string>, <ip address string>, <integer port number>)
    # get the XOR distance from another node 
    node.distance_to(node_obj)
    # compare distance from two other nodes 
    node.compare_distance(node_1, node_2)
    # see if this node is a "good node"
    node.good_node()
  
  """   

  def __init__(self, id, ip, port):
    self.id = str(id)
    self.long_id = util.string_to_long(self.id)
    self.ip = ip
    self.port = port
    self.replied = 0 
    self.last_replied = 0 
    self.last_queried = 0 
    self.pinged = 0 
    self.last_pinged = 0 

  """
    Return the XOR distance between this node and another node 
  """
  def distance_to(self, node):
    return self.long_id ^ node.long_id

  """
    Compares the XOR distance from this node to two other nodes.
    Returns: 
      - a positive integer representing (distance to node_1 - distance to node_2)
      - 0 if distances are equal 
      - a negative integer representing (distance to node_1 - distance to node_2)
  """
  def compare_distance(self, node_1, node_2):
    return self.distance_to(node_1) - self.distance_to(node_2)

  """
    BitTorrent defination of a good node: 
    - pinged less than 3 times 
    - replied in the last 15 minutes or ever replied, and queried in the last 15 minutes 
    Note: we might need to customize this definition for our own DHT 
  """
  def good_node(self):
    return (self.pinged < 3 and       
            (self.last_replied > getruntime() - 60*15 or   
            (self.replied and self.last_queried > getruntime() - 60*15)))

  """
    List representation of this node 
  """
  def __repr__(self): 
    return repr([self.id, self.ip, self.port])

  """
    String representation of this node 
  """
  def __str__(self):
    return "%s %s:%s" % (self.id, self.ip, str(self.port))
