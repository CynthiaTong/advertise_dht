dy_import_module_symbols("util.r2py")

class Node:

  def __init__(self, id, ip=None, port=None):
    self.id = str(id)
    self.char_id = [ord(c) for c in self.id]
    self.long_id = _get_randomint(self.id, 20)
    self.ip = ip
    self.port = port
    self.replied = False 
    self.last_replied = 0 
    self.last_queried = 0 
    self.pinged = 0 

  def distance_to(self, node):
    return self.long_id ^ node.long_id

  def compare_distance(self, node_1, node_2):
    return self.distance_to(node_1) - self.distance_to(node_2)

  # bit torrent defination of a good node 
  # pinged less than 3 times 
  # replied in the last 15 minutes 
  # ever replied, and queried in the last 15 minutes 
  def good_node(self):
    return (self.pinged < 3 and       
            (self.last_replied > get_time() - 60*15 or   
            (self.replied and self.last_queried > get_time() - 60*15)))

  def __repr__(self):
    return repr([self.long_id, self.ip, self.port])

  def __str__(self):
    return "%s %s:%s" % (self.long_id, self.ip, str(self.port))

# Converts some number of random bytes into a number
# Treats random data as an unsigned long.
def _get_randomint(data, bytes):
  # Store the number
  num = 0L
  offset = 0
  for char in data:
    num |= ord(char) << offset * 8
    offset += 1

  return num
